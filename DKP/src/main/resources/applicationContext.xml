<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

  <!-- 自动扫描 -->
  <context:component-scan base-package="com.dkp"/>

  <!-- 第一种方式：加载一个properties文件 -->
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="classpath:app-test.properties"/>
  </bean>

  <!-- 配置数据源 -->
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
        destroy-method="close">
    <property name="driverClassName" value="${jdbc.driver}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    <!-- 初始化连接大小 -->
    <property name="initialSize" value="${initialSize}"></property>
    <!-- 连接池最大数量 -->
    <property name="maxActive" value="${maxActive}"></property>
    <!-- 连接池最大空闲 -->
    <property name="maxIdle" value="${maxIdle}"></property>
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="${minIdle}"></property>
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="${maxWait}"></property>
  </bean>

  <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

    <property name="dataSource" ref="dataSource"/>
    <!-- 自动扫描mapping.xml文件 -->
    <property name="mapperLocations" value="classpath:com/dkp/mapper/*.xml"></property>
  </bean>

  <!-- DAO/Mapper接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.dkp.mapper"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
  </bean>


  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <tx:annotation-driven transaction-manager="transactionManager"/>

  <!--<bean id="userManager" class="com.dkp.service.test.UserManagerServiceImpl">
    <property name="name" value="lixiaoxi"></property>
  </bean>-->


  <!--这是一个切面,事务管理是一个切面,权限管理也是一个切面,切面的意思就是把这里面的方法通过下面的配置,打包成一个集合,一起放到切点方法中-->
  <bean id="aspectBean" class="com.dkp.aop.AopAspect" />

  <!--<aop:config>
    <aop:aspect ref="aspectBean">
      <aop:pointcut id="pointcut" expression="execution(* com.dkp.service..*(..))"/>

      <aop:before method="doBefore" pointcut-ref="pointcut"/>
      &lt;!&ndash;<aop:after-returning method="doAfterReturning" pointcut-ref="pointcut" returning="result"/>
      <aop:after method="doAfter" pointcut-ref="pointcut" />
      <aop:around method="doAround" pointcut-ref="pointcut"/>
      <aop:after-throwing method="doAfterThrowing" pointcut-ref="pointcut" throwing="ex"/>&ndash;&gt;
    </aop:aspect>
  </aop:config>-->
</beans>